syntax = "proto3";
package andromeda.internft.v1alpha1;

import "andromeda/internft/v1alpha1/types.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

// Msg defines the module's Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Send defines a method to send an NFT from one account to another account.
  rpc Send(MsgSend) returns (MsgSendResponse);

  // NewClass defines a method to create a class.
  rpc NewClass(MsgNewClass) returns (MsgNewClassResponse);

  // UpdateClass defines a method to update a class.
  rpc UpdateClass(MsgUpdateClass) returns (MsgUpdateClassResponse);

  // MintNFT defines a method to mint an NFT.
  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);

  // BurnNFT defines a method to burn an NFT.
  rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);

  // UpdateNFT defines a method to update an NFT.
  rpc UpdateNFT(MsgUpdateNFT) returns (MsgUpdateNFTResponse);
}

// MsgSend is the Msg/Send request type.
message MsgSend {
  option (cosmos.msg.v1.signer) = "sender";

  // the sender of the NFT
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the recipient of the NFT
  string recipient = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the NFT to send
  NFT nft = 3 [(gogoproto.nullable) = false];
}

// MsgSendResponse is the Msg/Send response type.
message MsgSendResponse {}

// MsgNewClass is the Msg/NewClass request type.
message MsgNewClass {
  option (cosmos.msg.v1.signer) = "operator";

  // the operator of the class
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the new class created
  Class class = 2 [(gogoproto.nullable) = false];

  // the traits of the new class
  repeated Trait traits = 3 [(gogoproto.nullable) = false];

  // app specific metadata of the new class (optional)
  google.protobuf.Any data = 4;
}

// MsgNewClassResponse is the Msg/NewClass response type.
message MsgNewClassResponse {}

// MsgUpdateClass is the Msg/UpdateClass request type.
message MsgUpdateClass {
  option (cosmos.msg.v1.signer) = "operator";

  // the operator of the class
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the class to update
  Class class = 2 [(gogoproto.nullable) = false];

  // app specific metadata of the class (optional)
  google.protobuf.Any data = 3;
}

// MsgUpdateClassResponse is the Msg/UpdateClass response type.
message MsgUpdateClassResponse {}

// MsgMintNFT is the Msg/MintNFT request type.
message MsgMintNFT {
  option (cosmos.msg.v1.signer) = "operator";

  // the operator of the class
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the recipient of the new NFT
  string recipient = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the new NFT to mint
  NFT nft = 3 [(gogoproto.nullable) = false];

  // the properties of the new NFT
  repeated Property properties = 4 [(gogoproto.nullable) = false];
}

// MsgMintNFTResponse is the Msg/MintNFT response type.
message MsgMintNFTResponse {}

// MsgBurnNFT is the Msg/BurnNFT request type.
message MsgBurnNFT {
  option (cosmos.msg.v1.signer) = "owner";

  // the owner of the NFT
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the NFT to burn
  NFT nft = 2 [(gogoproto.nullable) = false];
}

// MsgBurnNFTResponse is the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}

// MsgUpdateNFT is the Msg/UpdateNFT request type.
message MsgUpdateNFT {
  option (cosmos.msg.v1.signer) = "owner";

  // the owner of the NFT
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the NFT to update
  NFT nft = 2 [(gogoproto.nullable) = false];

  // the new properties
  repeated Property properties = 3 [(gogoproto.nullable) = false];
}

// MsgUpdateNFTResponse is the Msg/UpdateNFT response type.
message MsgUpdateNFTResponse {}
