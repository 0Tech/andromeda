syntax = "proto3";
package andromeda.internft.v1alpha1;

import "andromeda/internft/v1alpha1/types.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";

// Query defines the module's Query service.
service Query {
  // Params queries the module params.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/params";
  }

  // Class queries a class.
  rpc Class(QueryClassRequest) returns (QueryClassResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes/{class_id}";
  }

  // Classes queries all classes.
  rpc Classes(QueryClassesRequest) returns (QueryClassesResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes";
  }

  // Trait queries a trait of a class.
  rpc Trait(QueryTraitRequest) returns (QueryTraitResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes/{class_id}/traits/{trait_id}";
  }

  // Traits queries all the traits of a class.
  rpc Traits(QueryTraitsRequest) returns (QueryTraitsResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes/{class_id}/traits";
  }

  // Token queries a token.
  rpc Token(QueryTokenRequest) returns (QueryTokenResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes/{class_id}/tokens/{token_id}";
  }

  // Tokens queries all the tokens of a class.
  rpc Tokens(QueryTokensRequest) returns (QueryTokensResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes/{class_id}/tokens";
  }

  // Property queries a property of a class.
  rpc Property(QueryPropertyRequest) returns (QueryPropertyResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes/{class_id}/tokens/{token_id}/properties/{trait_id}";
  }

  // Properties queries all the properties of a token.
  rpc Properties(QueryPropertiesRequest) returns (QueryPropertiesResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes/{class_id}/tokens/{token_id}/properties";
  }

  // Owner queries the owner of a token.
  rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {
    option (google.api.http).get = "/andromeda/internft/v1alpha1/classes/{class_id}/tokens/{token_id}/owner";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // the parameters of the module
  Params params = 1;
}

// QueryClassRequest is the request type for the Query/Class RPC method.
message QueryClassRequest {
  // the identifier of a class
  string class_id = 1;
}

// QueryClassResponse is the response type for the Query/Class RPC method.
message QueryClassResponse {
  // the corresponding class
  Class class = 1;
}

// QueryClassesRequest is the request type for the Query/Classes RPC method.
message QueryClassesRequest {
  // optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryClassesResponse is the response type for the Query/Classes RPC method.
message QueryClassesResponse {
  // all the classes
  repeated Class classes = 1;

  // pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTraitRequest is the request type for the Query/Trait RPC method.
message QueryTraitRequest {
  // the identifier of a class
  string class_id = 1;

  // the identifier of a trait
  string trait_id = 2;
}

// QueryTraitResponse is the response type for the Query/Trait RPC method.
message QueryTraitResponse {
  // the corresponding trait
  Trait trait = 1;
}

// QueryTraitsRequest is the request type for the Query/Traits RPC method.
message QueryTraitsRequest {
  // the identifier of a class
  string class_id = 1;

  // optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryTraitsResponse is the response type for the Query/Traits RPC method.
message QueryTraitsResponse {
  // all the traits of the corresponding class
  repeated Trait traits = 1;

  // pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTokenRequest is the request type for the Query/Token RPC method.
message QueryTokenRequest {
  // the identifier of a class
  string class_id = 1;

  // the identifier of a token
  string token_id = 2;
}

// QueryTokenResponse is the response type for the Query/Token RPC method.
message QueryTokenResponse {
  // the corresponding token
  Token token = 1;
}

// QueryTokensRequest is the request type for the Query/Tokens RPC method.
message QueryTokensRequest {
  // the identifier of a class
  string class_id = 1;

  // optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryTokensResponse is the response type for the Query/Tokens RPC method.
message QueryTokensResponse {
  // all the tokens of the corresponding class
  repeated Token tokens = 1;

  // pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPropertyRequest is the request type for the Query/Property RPC method.
message QueryPropertyRequest {
  // the identifier of a class
  string class_id = 1;

  // the identifier of a token
  string token_id = 2;

  // the identifier of the corresponding trait
  string trait_id = 3;
}

// QueryPropertyResponse is the response type for the Query/Property RPC method.
message QueryPropertyResponse {
  // the corresponding property
  Property property = 1;
}

// QueryPropertiesRequest is the request type for the Query/Properties RPC method.
message QueryPropertiesRequest {
  // the identifier of a class
  string class_id = 1;

  // the identifier of a token
  string token_id = 2;

  // optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryPropertiesResponse is the response type for the Query/Properties RPC method.
message QueryPropertiesResponse {
  // all the properties of the corresponding token
  repeated Property properties = 1;

  // pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryOwnerRequest is the request type for the Query/Owner RPC method.
message QueryOwnerRequest {
  // the identifier of a class
  string class_id = 1;

  // the identifier of a token
  string token_id = 2;
}

// QueryOwnerResponse is the response type for the Query/Owner RPC method.
message QueryOwnerResponse {
  // the owner of the corresponding token
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}
