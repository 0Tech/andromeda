// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: andromeda/internft/v1alpha1/event.proto

package internftv1alpha1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventSend is emitted on Msg/Send.
type EventSend struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Nft      NFT    `protobuf:"bytes,3,opt,name=nft,proto3" json:"nft"`
}

func (m *EventSend) Reset()         { *m = EventSend{} }
func (m *EventSend) String() string { return proto.CompactTextString(m) }
func (*EventSend) ProtoMessage()    {}
func (*EventSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef49296c453ca850, []int{0}
}
func (m *EventSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSend.Merge(m, src)
}
func (m *EventSend) XXX_Size() int {
	return m.Size()
}
func (m *EventSend) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSend.DiscardUnknown(m)
}

var xxx_messageInfo_EventSend proto.InternalMessageInfo

func (m *EventSend) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSend) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventSend) GetNft() NFT {
	if m != nil {
		return m.Nft
	}
	return NFT{}
}

// EventNewClass is emitted on Msg/NewClass.
type EventNewClass struct {
	Class  Class      `protobuf:"bytes,1,opt,name=class,proto3" json:"class"`
	Traits []Trait    `protobuf:"bytes,2,rep,name=traits,proto3" json:"traits"`
	Data   *types.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EventNewClass) Reset()         { *m = EventNewClass{} }
func (m *EventNewClass) String() string { return proto.CompactTextString(m) }
func (*EventNewClass) ProtoMessage()    {}
func (*EventNewClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef49296c453ca850, []int{1}
}
func (m *EventNewClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewClass.Merge(m, src)
}
func (m *EventNewClass) XXX_Size() int {
	return m.Size()
}
func (m *EventNewClass) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewClass.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewClass proto.InternalMessageInfo

func (m *EventNewClass) GetClass() Class {
	if m != nil {
		return m.Class
	}
	return Class{}
}

func (m *EventNewClass) GetTraits() []Trait {
	if m != nil {
		return m.Traits
	}
	return nil
}

func (m *EventNewClass) GetData() *types.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

// EventUpdateClass is emitted on Msg/UpdateClass.
type EventUpdateClass struct {
	Class Class      `protobuf:"bytes,1,opt,name=class,proto3" json:"class"`
	Data  *types.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EventUpdateClass) Reset()         { *m = EventUpdateClass{} }
func (m *EventUpdateClass) String() string { return proto.CompactTextString(m) }
func (*EventUpdateClass) ProtoMessage()    {}
func (*EventUpdateClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef49296c453ca850, []int{2}
}
func (m *EventUpdateClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateClass.Merge(m, src)
}
func (m *EventUpdateClass) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateClass) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateClass.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateClass proto.InternalMessageInfo

func (m *EventUpdateClass) GetClass() Class {
	if m != nil {
		return m.Class
	}
	return Class{}
}

func (m *EventUpdateClass) GetData() *types.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

// EventMintNFT is emitted on Msg/MintNFT.
type EventMintNFT struct {
	Nft        NFT        `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft"`
	Properties []Property `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties"`
	Recipient  string     `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *EventMintNFT) Reset()         { *m = EventMintNFT{} }
func (m *EventMintNFT) String() string { return proto.CompactTextString(m) }
func (*EventMintNFT) ProtoMessage()    {}
func (*EventMintNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef49296c453ca850, []int{3}
}
func (m *EventMintNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMintNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMintNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMintNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMintNFT.Merge(m, src)
}
func (m *EventMintNFT) XXX_Size() int {
	return m.Size()
}
func (m *EventMintNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMintNFT.DiscardUnknown(m)
}

var xxx_messageInfo_EventMintNFT proto.InternalMessageInfo

func (m *EventMintNFT) GetNft() NFT {
	if m != nil {
		return m.Nft
	}
	return NFT{}
}

func (m *EventMintNFT) GetProperties() []Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *EventMintNFT) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// EventBurnNFT is emitted on Msg/BurnNFT.
type EventBurnNFT struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Nft   NFT    `protobuf:"bytes,2,opt,name=nft,proto3" json:"nft"`
}

func (m *EventBurnNFT) Reset()         { *m = EventBurnNFT{} }
func (m *EventBurnNFT) String() string { return proto.CompactTextString(m) }
func (*EventBurnNFT) ProtoMessage()    {}
func (*EventBurnNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef49296c453ca850, []int{4}
}
func (m *EventBurnNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBurnNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBurnNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBurnNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBurnNFT.Merge(m, src)
}
func (m *EventBurnNFT) XXX_Size() int {
	return m.Size()
}
func (m *EventBurnNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBurnNFT.DiscardUnknown(m)
}

var xxx_messageInfo_EventBurnNFT proto.InternalMessageInfo

func (m *EventBurnNFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventBurnNFT) GetNft() NFT {
	if m != nil {
		return m.Nft
	}
	return NFT{}
}

// EventUpdateNFT is emitted on Msg/UpdateNFT.
type EventUpdateNFT struct {
	Nft        NFT        `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft"`
	Properties []Property `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties"`
}

func (m *EventUpdateNFT) Reset()         { *m = EventUpdateNFT{} }
func (m *EventUpdateNFT) String() string { return proto.CompactTextString(m) }
func (*EventUpdateNFT) ProtoMessage()    {}
func (*EventUpdateNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef49296c453ca850, []int{5}
}
func (m *EventUpdateNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateNFT.Merge(m, src)
}
func (m *EventUpdateNFT) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateNFT.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateNFT proto.InternalMessageInfo

func (m *EventUpdateNFT) GetNft() NFT {
	if m != nil {
		return m.Nft
	}
	return NFT{}
}

func (m *EventUpdateNFT) GetProperties() []Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

func init() {
	proto.RegisterType((*EventSend)(nil), "andromeda.internft.v1alpha1.EventSend")
	proto.RegisterType((*EventNewClass)(nil), "andromeda.internft.v1alpha1.EventNewClass")
	proto.RegisterType((*EventUpdateClass)(nil), "andromeda.internft.v1alpha1.EventUpdateClass")
	proto.RegisterType((*EventMintNFT)(nil), "andromeda.internft.v1alpha1.EventMintNFT")
	proto.RegisterType((*EventBurnNFT)(nil), "andromeda.internft.v1alpha1.EventBurnNFT")
	proto.RegisterType((*EventUpdateNFT)(nil), "andromeda.internft.v1alpha1.EventUpdateNFT")
}

func init() {
	proto.RegisterFile("andromeda/internft/v1alpha1/event.proto", fileDescriptor_ef49296c453ca850)
}

var fileDescriptor_ef49296c453ca850 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0x33, 0x9b, 0x36, 0xfc, 0x32, 0xfd, 0x29, 0xb2, 0xe4, 0xb0, 0x6d, 0x71, 0x1b, 0x16,
	0xa4, 0x39, 0xe8, 0xae, 0xad, 0x22, 0x12, 0x41, 0xcc, 0x8a, 0x95, 0x22, 0x0d, 0x21, 0x8d, 0x22,
	0x12, 0x90, 0xe9, 0xee, 0x93, 0x75, 0x21, 0x99, 0x59, 0x66, 0xa7, 0xa9, 0x01, 0x2f, 0xbe, 0x03,
	0x6f, 0xde, 0x3d, 0x0a, 0xde, 0xbc, 0xf9, 0x06, 0x8a, 0x20, 0x14, 0x4f, 0x9e, 0x44, 0x92, 0x9b,
	0xaf, 0x42, 0x76, 0x76, 0x26, 0xe6, 0xb4, 0xb1, 0xe0, 0xc1, 0xdb, 0xec, 0x3c, 0x9f, 0xe7, 0x3b,
	0xcf, 0x9f, 0x2f, 0x8b, 0xb7, 0x09, 0x0d, 0x39, 0x1b, 0x41, 0x48, 0xbc, 0x98, 0x0a, 0xe0, 0x74,
	0x20, 0xbc, 0xf1, 0x0e, 0x19, 0x26, 0x2f, 0xc8, 0x8e, 0x07, 0x63, 0xa0, 0xc2, 0x4d, 0x38, 0x13,
	0xcc, 0xdc, 0x9c, 0x83, 0xae, 0x06, 0x5d, 0x0d, 0x6e, 0xac, 0x47, 0x8c, 0x45, 0x43, 0xf0, 0x24,
	0x7a, 0x74, 0x3c, 0xf0, 0x08, 0x9d, 0xe4, 0x79, 0x1b, 0xb5, 0x88, 0x45, 0x4c, 0x1e, 0xbd, 0xec,
	0xa4, 0x6e, 0xd7, 0x03, 0x96, 0x8e, 0x58, 0xfa, 0x3c, 0x0f, 0xe4, 0x1f, 0x2a, 0x54, 0x58, 0x91,
	0x98, 0x24, 0xa0, 0x40, 0xe7, 0x03, 0xc2, 0xd5, 0x07, 0x59, 0x85, 0x87, 0x40, 0x43, 0xf3, 0x3a,
	0xae, 0xa4, 0x40, 0x43, 0xe0, 0x16, 0xaa, 0xa3, 0x46, 0xd5, 0xb7, 0xbe, 0x7e, 0xbc, 0x56, 0x53,
	0xc2, 0xad, 0x30, 0xe4, 0x90, 0xa6, 0x87, 0x82, 0xc7, 0x34, 0xea, 0x2a, 0xce, 0xbc, 0x89, 0xff,
	0xe3, 0x10, 0x40, 0x3c, 0x06, 0x6e, 0x19, 0x4b, 0x72, 0xe6, 0xa4, 0x79, 0x1b, 0x97, 0xe9, 0x40,
	0x58, 0xe5, 0x3a, 0x6a, 0xac, 0xed, 0xd6, 0xdd, 0x82, 0xa9, 0xb8, 0xed, 0xbd, 0x9e, 0xbf, 0x72,
	0xfa, 0x7d, 0xab, 0xd4, 0xcd, 0x52, 0x9c, 0x4f, 0x08, 0x5f, 0x90, 0xf5, 0xb6, 0xe1, 0xe4, 0xfe,
	0x90, 0xa4, 0xa9, 0x79, 0x17, 0xaf, 0x06, 0xd9, 0x41, 0x96, 0xbc, 0xb6, 0xeb, 0x14, 0xaa, 0xc9,
	0x14, 0xa5, 0x97, 0xa7, 0x99, 0xf7, 0x70, 0x45, 0x70, 0x12, 0x8b, 0xd4, 0x32, 0xea, 0xe5, 0xa5,
	0x02, 0xbd, 0x0c, 0x55, 0x02, 0x2a, 0xcf, 0x6c, 0xe0, 0x95, 0x90, 0x08, 0xa2, 0xda, 0xa9, 0xb9,
	0xf9, 0x1e, 0x5d, 0xbd, 0x47, 0xb7, 0x45, 0x27, 0x5d, 0x49, 0x38, 0xaf, 0xf0, 0x25, 0x59, 0xfc,
	0xe3, 0x24, 0x24, 0x02, 0xfe, 0x4e, 0xfd, 0xfa, 0x75, 0x63, 0xe9, 0xeb, 0x5f, 0x10, 0xfe, 0x5f,
	0x3e, 0x7f, 0x10, 0x53, 0xd1, 0xde, 0xeb, 0xe9, 0x35, 0xa0, 0x73, 0xaf, 0xc1, 0x7c, 0x84, 0x71,
	0xc2, 0x59, 0x02, 0x5c, 0xc4, 0xa0, 0x07, 0x77, 0xa5, 0x50, 0xa0, 0x93, 0xe3, 0x13, 0xa5, 0xb2,
	0x90, 0x6e, 0xde, 0xc2, 0x55, 0x0e, 0x41, 0x9c, 0xc4, 0x40, 0x73, 0x4f, 0x14, 0x99, 0xe8, 0x37,
	0xea, 0xbc, 0x54, 0xed, 0xf8, 0xc7, 0x9c, 0x66, 0xed, 0xb8, 0x78, 0x95, 0x9d, 0xd0, 0x3f, 0x30,
	0x6f, 0x8e, 0xe9, 0xf6, 0x8d, 0xf3, 0xbb, 0xf0, 0x2d, 0xc2, 0x17, 0x17, 0x16, 0xf9, 0xef, 0xcc,
	0xd2, 0x7f, 0x6d, 0x9c, 0x4e, 0x6d, 0x74, 0x36, 0xb5, 0xd1, 0x8f, 0xa9, 0x8d, 0xde, 0xcc, 0xec,
	0xd2, 0xd9, 0xcc, 0x2e, 0x7d, 0x9b, 0xd9, 0x25, 0xbc, 0x15, 0xb0, 0x51, 0x91, 0xac, 0x8f, 0x65,
	0x4b, 0x9d, 0xcc, 0x38, 0x1d, 0xf4, 0xec, 0x6a, 0xc1, 0x2f, 0xe4, 0x8e, 0xbe, 0xd1, 0x17, 0xef,
	0x8c, 0x72, 0x6b, 0xff, 0xe9, 0x7b, 0x63, 0xb3, 0x35, 0xd7, 0xdf, 0xd7, 0xfa, 0x4f, 0x14, 0xf3,
	0x79, 0x21, 0xda, 0xd7, 0xd1, 0xbe, 0x8e, 0x4e, 0x8d, 0xed, 0x82, 0x68, 0xff, 0x61, 0xc7, 0x3f,
	0x00, 0x41, 0x32, 0x1f, 0xff, 0x34, 0x2e, 0xcf, 0xc9, 0x66, 0x53, 0xa3, 0xcd, 0xa6, 0x66, 0x8f,
	0x2a, 0xd2, 0xfb, 0x37, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x5a, 0xc3, 0x16, 0x97, 0x05,
	0x00, 0x00,
}

func (m *EventSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventNewClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Traits) > 0 {
		for iNdEx := len(m.Traits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Traits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Class.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventUpdateClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Class.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventMintNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMintNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMintNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Properties) > 0 {
		for iNdEx := len(m.Properties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Properties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventBurnNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBurnNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBurnNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for iNdEx := len(m.Properties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Properties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.Nft.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventNewClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Class.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.Traits) > 0 {
		for _, e := range m.Traits {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventUpdateClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Class.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventMintNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Nft.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventBurnNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.Nft.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventUpdateNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Nft.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Class.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Traits = append(m.Traits, Trait{})
			if err := m.Traits[len(m.Traits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Class.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMintNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMintNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMintNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, Property{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBurnNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBurnNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBurnNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, Property{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
